'''Программа принимает на вход натуральное число N.
Ваша задача вывести на экран все числа от 1 до N каждое число на отдельной строке. '''

# n = int(input())
# for i in range(1, n + 1):
#     print(i)

'''-------------------------------------'''

'''Напишите программу, которая выведет все элементы арифметической прогрессии от 0 до 500 включительно с шагом 5.
Каждый элемент выводится отдельно на своей строке в таком виде'''

# for i in range(0, 501, 5):
#     print(i)

'''-------------------------------------'''

'''Программа принимает на вход натуральное число N. 
Ваша задача вывести на экран все числа от N до 1 в сторону уменьшения каждое число на отдельной строке. '''

# n = int(input())
# for i in range(n, 0, -1):
#     print(i)

'''-------------------------------------'''

'''Каждый, кто смотрел Симпсонов, помнит, что в начале любой серии Барт писал забавные фразы на доске.
Давайте и мы напишем подобную программу. 
На вход ей будет поступать фраза и затем количество раз, которое эту фразу нужно повторить.'''

# text = input()
# num = int(input())
# for i in range(num):
#     print(text)

'''-------------------------------------'''

'''Напишите программу, которая считывает два натуральных числа a и b (гарантируется, что a<b), 
после чего для всех чисел от a до b включительно выводит:
“Fizz”, если это число делится на 3;
“Buzz”, если это число делится на 5;
“FizzBuzz”, если выполнены оба предыдущих условия;
само это число в остальных случаях.'''

# a = int(input())
# b = int(input())
# for i in range(a, b + 1):
#     if i % 3 == 0 and i % 5 == 0:
#         print('FizzBuzz')
#     elif i % 3 == 0:
#         print('Fizz')
#     elif i % 5 == 0:
#         print('Buzz')
#     else:
#         print(i)

'''-------------------------------------'''

'''Давайте составим сводную информацию о квадратах и кубах интервала чисел.
На вход программе подается два натуральных числа a и b (гарантируется, что a<b), 
после чего для каждого целого числа на интервале от a до b включительно необходимо вывести фразу следующего вида:
«Число {число}; его квадрат = {квадрат}; его куб = {куб}»
Кавычки выводить не нужно и пользуйтесь f-строкой.'''

# a, b = int(input()), int(input())
# for i in range(a, b + 1):
#     print(f'Число {i}; его квадрат = {i**2}; его куб = {i**3}')

'''-------------------------------------'''

'''Если перечислить все натуральные числа ниже 10, которые кратны 3 или 5, то получим 3, 5, 6 и 9. 
Сумма этих чисел 23.
Напишите программу, которая принимает натуральное число n и находит 
сумму всех чисел ниже переданного числа n, которые делятся на 3 или на 5.
'''

# n = int(input())
# summa = 0
# for i in range(n):
#     if i % 3 == 0 or i % 5 == 0:
#         summa += i
# print(summa)

'''-------------------------------------'''

'''Напишите программу, которая найдет сумму кубов натуральных чисел от 50 до 100 включительно'''

# summa = 0
# for i in range(50, 101):
#     summa += i**3
# print(summa)

'''-------------------------------------'''

'''Стандартная задача на нахождения факториала. Факториал числа n! обозначается и находится по формуле '''

# n = int(input())
# factorial = 1
# if n == 0 or n == 1:
#     print(factorial)
# else:
#     for i in range(1, n+1):
#         factorial *= i
#     print(factorial)

'''-------------------------------------'''

'''Правила её очень просты: сначала определяется значение n — количество раундов игры. 
В очередном раунде каждый из игроков один раз бросает стандартный игральный кубик, 
на грани которого нанесены различные числа от 1 до 6. 
Игрок, выбросивший большее значение, становится победителем в раунде. 
В случае, если выпавшие значения равны, победа не засчитывается никому.
В самой же игре побеждает участник, выигравший в большем количестве раундов. 
Если же количества побед, заслуженных игроками, равны, то объявляется ничья.

В первой строке входных данных содержится число n (1≤n≤100) — количество раундов игры.
Следующие n строк содержат описание раундов. 
В i-й из них содержится пара целых чисел mi и ci (1≤mi,ci≤6) — результаты бросков Мишки и Криса в i-ом раунде соответственно.'''

# round_count = int(input())
# mishka = 0
# kris = 0
# for i in range(round_count):
#     m, k = map(int, input().split())
#     if m > k:
#         mishka += 1
#     elif m < k:
#         kris += 1
#     else:
#         mishka += 1
#         kris += 1
# if mishka > kris:
#     print('Mishka')
# elif mishka < kris:
#     print('Chris')
# else:
#     print('Friendship is magic!^^')

'''-------------------------------------'''

'''Найдите, в каких строках из введённых и в каком месте упоминается "рок", причем регистр букв не важен.
Вместо явного цикла прохода по строке в цикле используйте подходящий метод строки

Для каждой строки, в которой есть сочетание символов «рок», 
нужно вывести (в порядке появления таких строк) номер этой строки (нумерация начинается с единицы) и номер символа, 
с которого начинается первое вхождение этой подстроки (нумерация символов также с единицы).'''

# num = int(input())
# for i in range(num):
#     stroka = input().lower()
#     if 'рок' in stroka:
#         print(i + 1, stroka.index('рок') + 1)

'''-------------------------------------'''

'''Предположим, вы переписываете у друга рецепты в блокнотик, но вам не нравится "соль". Переписывайте без этого слова.
Одна строка — пункты рецепта, разделённые запятой и пробелом, без пунктов с упоминанием слова "соль" 
(то есть таких, в которых нет подстроки "соль" в нижнем регистре).'''

# num = int(input())
# result = ''
# for i in range(num):
#     punkt = input()
#     if 'соль' in punkt:
#         continue
#     result += punkt + ',' + ' '
# print(result[:-2])

'''-------------------------------------'''

'''Иногда некоторые слова вроде «civilization» или «internationalization» настолько длинны, 
что их весьма утомительно писать много раз в каком либо тексте.
Будем считать слово слишком длинным, если его длина строго больше 10 символов. 
Все слишком длинные слова можно заменить специальной аббревиатурой.
Эта аббревиатура строится следующим образом: записывается первая и последняя буква слова, 
а между ними — количество букв между первой и последней буквой (в десятичной системе счисления и без ведущих нулей).
Таком образом, «civilization» запишется как «c10n», а «internationalization» как «i18n».
Вам предлагается автоматизировать процесс замены слов на аббревиатуры. 
При этом все слишком длинные слова должны быть заменены аббревиатурой, 
а слова, не являющиеся слишком длинными, должны остаться без изменений.'''

# num = int(input())
# for _ in range(num):
#     word = input()
#     if len(word) > 10:
#         print(word[0] + str(len(word[1:-1])) + word[-1])
#     else:
#         print(word)

'''-------------------------------------'''

'''Ваша задача создать список из n строк. 
Программа сперва будет принимать натуральное число n, а затем n строк в каждой отдельной строке. 
В качестве ответа выведите получившийся список.'''

# num = int(input())
# words = []
# for i in range(num):
#     word = input()
#     words.append(word)
# print(words)

'''-------------------------------------'''

'''Нужно вывести список слов (словом считается часть предложения, окружённая символами пустого пространства), 
в которых присутствует введённая буква в любом регистре, в том же порядке, в каком они встречаются в предложении.'''

# letter = input()
# sentence = input().split()
# for i in sentence:
#     if letter in i.lower():
#         print(i)

'''-------------------------------------'''

'''Программа получает на вход в одной строке элементы списка - целые числа, разделенные пробелом. 
Количество элементов произвольное
И на следующей строке вводится одно число r - значение поиска
Ваша задача реализовать линейный алгоритм поиска введенного значения r. 
В случае успеха - выведите порядковый номер(индекс) первого найденного элемента в списке при условии, 
что индексация начинается с единицы. Если данный элемент отсутствует - необходимо вывести строку ErrorValue '''

# numbers = list(map(int, input().split()))
# num = int(input())
# for i in range(len(numbers)):
#     if numbers[i] == num:
#         print(i + 1)
#         break
# else:
#     print('ErrorValue')

'''-------------------------------------'''

'''На вход программе поступает список из целых чисел. 
Ваша задача найти в данном списке наименьшее положительное значение. 
В случае, если положительных значений нет, выведите строку "Empty"'''

# number = list(map(int, input().split()))
# minimum = float('infinity')
# for i in number:
#     if 0 < i < minimum:
#         minimum = i
# if minimum == float('infinity'):
#     print('Empty')
# else:
#     print(minimum)

'''-------------------------------------'''

'''
Выводится одно целое число — максимальное количество раз, 
которое встречается какая-либо буква (без учёта регистра) 
или иной символ во введённой строке.'''

# word = input().lower()
# spis = []
# for i in word:
#     spis.append(word.count(i))
# print(max(spis))

'''-------------------------------------'''

'''На вход программе подается строка, состоящая из различных символов: буквы, цифры, знаки препинания и т.д.
Ваша задача определить сколько символов в данной строке являются цифрами и также найти сумму всех этих цифр. 
Например, в строке "Комната 1408" содержится 4 цифры и их сумма равна 13.
В качестве ответа необходимо через пробел вывести 2 числа - количество цифр в введенной строке и их сумму'''

# word = input()
# counter = 0
# summa = 0
# for i in word:
#     if i.isdigit():
#         counter += 1
#         summa += int(i)
# print

'''-------------------------------------'''

'''И так, у нас есть последовательность скобочных символов, состоящая только из символов ( и )
Ваша задача определить является ли введенная скобочная последовательность правильной.
Правильная скобочная последовательность (ПСП) называется строка, состоящая только символов "скобок", 
где каждой закрывающей скобке найдётся соответствующая открывающая. При этом учитывайте, что:
Пустая последовательность является правильной.
Если A – правильная скобочная последовательность, то (A) – правильные скобочные последовательности.
Если A и B – правильные скобочные последовательности, то AB – правильная скобочная последовательность.
Если введенная строка является ПСП, выведите YES, в противном случае - NO.'''

# bracket = input()
# stack = []
# good = True
# for i in bracket:
#     if i in '[({':
#         stack.append(i)
#     elif i in '})]':
#         if not stack:
#             good = False
#             break
#         open_bracket = stack.pop()
#         if open_bracket == '(' and i == ')':
#             continue
#         if open_bracket == '{' and i == '}':
#             continue
#         if open_bracket == '[' and i == ']':
#             continue
#         good = False
#         break
# if good and len(stack) == 0:
#     print('YES')
# else:
#     print('NO')

'''-------------------------------------'''

'''На вход программе поступает строка, состоящая из нескольких слов, 
знаком разделителем между словами будем считать символ пробела. 
Ваша задача исключить из строки дублирующие слова: 
первое появление слова остается в строке, второе и все последующие появления исключаются. 
При сравнении на дубли строк регистр букв не учитывать, это значит слова python и PyThOn считаются одинаковыми.
В качестве ответа необходимо вывести итоговую строку без дублей.'''

# word = input().split()
# spisok_ogiginal = []
# spisok_lower = []
# for i in word:
#     if i.lower() not in spisok_lower:
#         spisok_lower.append(i.lower())
#         spisok_ogiginal.append(i)
# print(*spisok_ogiginal)

'''-------------------------------------'''

'''На вход вашей программе поступает положительное целое число n, 
а ваша задача вывести в порядке возрастания все цифры, которые встречались в этом числе, 
и напротив каждого также необходимо вывести сколько раз данная цифра встречалась в числе n'''

# n = str(input())
# letters = []
# counter = [0] * 10
# for i in n:
#     letters.append(int(i))
# for i in letters:
#     counter[i] += 1
# for i in range(10):
#     if counter[i] > 0:
#         print(i, counter[i])

'''-------------------------------------'''

'''Как видно из названия задачи, вам необходимо отсортировать список, 
состоящий только из чисел в пределах от -100 до 100 включительно, сортировкой подсчетом.
Программа получает на вход число n - количество элементов в списке, затем сами элементы списка
Вам необходимо вывести отсортированный список
P.S. не пользуйтесь встроенной функцией sorted или методом sort'''

# num = int(input())
# n = list(map(int, input().split()))
# for i in range(num - 1):
#     for j in range(num - i - 1):
#         if n[j] > n[j + 1]:
#             n[j], n[j + 1] = n[j + 1], n[j]
# print(*n)

'''-------------------------------------'''

'''Найдите сумму всех четырехзначных чисел, сумма цифр каждого из которых равна 20'''

# answer = 0
# for i in range(1000, 10000):
#     x = i
#     summa = 0
#     while x > 0:
#         summa += x % 10
#         x //= 10
#     if summa == 20:
#         answer += i
# print(answer)

'''-------------------------------------'''

'''В этой задаче вам предстоит построить лесенку из чисел. 
Программа принимает на вход целое положительное число n (n<=15) - количество уровней, ваша задача вывести n уровней, 
в каждом из которых стоят числа от 1 до значения уровня.'''

# num = int(input())
# for i in range(1, num + 1):
#     for j in range(1, i + 1):
#         print(j, end=' ')
#     print()

'''-------------------------------------'''

'''Ваша задача состоит в том, чтобы решить несколько более общую задачу –
а именно по числу n найти количество простых чисел p из интервала n < p < 2n.
Напомним, что число называется простым, если оно делится только само на себя и на единицу.'''

# answer = 0
# n = int(input())
# for i in range(n + 1, n * 2):
#     if i % 2 == 0 and i != 2 or i == 1:
#         continue
#     d = 3
#     is_plain = True
#     while d * d <= i:
#         if i % d == 0:
#             is_plain = False
#             break
#         d += 2
#     if is_plain:
#         answer += 1
# print(answer)

'''-------------------------------------'''

'''Ваша задача отсортировать список по возрастанию при помощи пузырьковой сортировки, 
в случае если элементы соседние совпадают менять их ненужно.
В качестве ответа нужно вывести отсортированный список и какое количество раз пришлось переставлять элементы 
в процессе сортировки'''

# num = int(input())
# n = list(map(int, input().split()))
# counter = 0
# for i in range(num - 1):
#     for j in range(num - i - 1):
#         if n[j] > n[j + 1]:
#             n[j], n[j + 1] = n[j + 1], n[j]
#             counter += 1
# print(*n)
# print(counter)

'''-------------------------------------'''

'''Сортировка вставками'''

# num = int(input())
# arr = list(map(int, input().split()))
# for i in range(1, num):
#     key = arr[i]
#     j = i
#     while (j - 1 >= 0) and (arr[j - 1] > key):
#         arr[j - 1], arr[j] = arr[j], arr[j - 1]
#         j = j - 1
#     arr[j] = key
# print(arr)

'''-------------------------------------'''

'''Вам нужно посчитать сумму элементов двумерного квадратного (NxN) списка, которые расположены на главной диагонали.
Под главной диагональю матрицы подразумевается диагональ, проведённая из левого верхнего угла в правый нижний.
Программа сперва принимает на вход число N (N<=15) - количество строк и столбцов в списке, 
а затем в N строках записаны элементы списка.'''

# size = int(input())
# mas = []
# num = 0
# for i in range(size):
#     mas.append([0] * size)
#     for j in range(size):
#         num += 1
#         mas[i][j] = num
# for k in mas:
#     print(*k)
'''-------------------------------------'''
# size = int(input())
# num = 0
# for i in range(size):
#     mas = list(map(int, input().split()))
#     num += mas[i]
# print(num)

'''-------------------------------------'''

'''Задана целочисленная квадратная матрица размером N x N. 
Необходимо обойти элементы этой матрицы сверху вниз слева направо и вывести элементы именно в таком порядке в виде таблицы. 
Программа принимает на вход натуральное число N – количество строк и столбцов матрицы. 
В каждой из последующих N строк записаны N целых чисел – элементы матрицы. 
Все числа во входных данных не превышают 100 по абсолютной величине.'''

# size = int(input())
# mas = []
# for i in range(size):
#     mas.append(list(map(int, input().split())))
#
# for elemIndex in range(size):
#     for lineIndex in range(size):
#         print(mas[lineIndex][elemIndex], end=' ')
#     print()

'''-------------------------------------'''

'''Задана целочисленная квадратная матрица размером N x N. 
Необходимо обойти элементы этой матрицы снизу вверх справо налево и вывести элементы именно в таком порядке в виде таблицы. 
Программа принимает на вход натуральное число N – количество строк и столбцов матрицы. 
В каждой из последующих N строк записаны N целых чисел – элементы матрицы. '''

# size = int(input())
# mas = []
# for i in range(size):
#     mas.append(list(map(int, input().split())))
#
# for elem_index in range(size - 1, -1, -1):
#     for line_index in range(size - 1, -1, -1):
#         print(mas[line_index][elem_index], end=' ')
#     print()

'''-------------------------------------'''

'''Задана целочисленная матрица, состоящая из N строк и M столбцов. 
Необходимо обойти элементы этой матрицы cправо налево сверху вниз и вывести элементы именно в таком порядке в виде таблицы. 
Программа принимает на вход два натуральных числа N и M – количество строк и столбцов матрицы. 
В каждой из последующих N строк записаны M целых чисел – элементы матрицы.'''

# line, column = map(int, input().split())
# arr = []
# for i in range(line):
#     arr.append(list(map(int, input().split())))
#
# for line_index in range(line):
#     for line_elem in range(column - 1, -1, -1):
#         print(arr[line_index][line_elem], end=' ')
#     print()

'''-------------------------------------'''

'''Задана целочисленная матрица, состоящая из N строк и M столбцов. 
Необходимо обойти элементы этой матрицы слева направо снизу вверх и вывести элементы именно в таком порядке в виде таблицы. 
Программа принимает на вход два натуральных числа N и M – количество строк и столбцов матрицы. 
В каждой из последующих N строк записаны M целых чисел – элементы матрицы. '''

# line, column = map(int, input().split())
# arr = []
# for i in range(line):
#     arr.append(list(map(int, input().split())))
#
# for line_index in range(line -1, -1, -1):
#     for elem_index in range(column):
#         print(arr[line_index][elem_index], end=' ')
#     print()

'''-------------------------------------'''

'''Перед Вами матрица размера 5×5, состоящая из 24-x нулей и единственной единицы. 
Строки матрицы пронумеруем числами от 1 до 5 сверху вниз, столбцы матрицы пронумеруем числами от 1 до 5 слева направо. 
За один ход разрешается применить к матрице одно из двух следующих преобразований:
Поменять местами две соседние строки матрицы, то есть строки с номерами i и i+1 для некоторого целого i (1≤i<5).
Поменять местами два соседних столбца матрицы, то есть столбцы с номерами j и j+1 для некоторого целого j (1≤j<5).
Вы считаете, что матрица будет выглядеть красиво, если единственная единица этой матрицы будет находиться в ее центре 
(в клетке, которая находится на пересечении третьей строки и третьего столбца). 
Посчитайте, какое минимальное количество ходов потребуется, чтобы сделать матрицу красивой.'''

# arr = []
# counter_line = -2
# counter_elem = -2
# is_one_finded = False
# for i in range(5):
#     arr.append(list(map(int, input().split())))
#
# for line in range(5):
#     counter_elem = -2
#     for elem in range(5):
#         if arr[line][elem] == 1:
#             is_one_finded = True
#             break
#         counter_elem += 1
#     if is_one_finded:
#         break
#     counter_line += 1
#
# counter_line = 0 if counter_line == 3 else abs(counter_line)
# counter_elem = 0 if counter_elem == 3 else abs(counter_elem)
#
# print(counter_elem + counter_line)

'''-------------------------------------'''

'''Задан целочисленный двумерный массив, состоящий из N строк и M столбцов. 
Требуется вычислить сумму элементов в каждой строке и в каждом столбце.
Программа получает на вход два натуральных числа N и M – количество строк и столбцов двумерного массива. 
В каждой из последующих N строк записаны M целых чисел – элементы массива. 
Все числа во входных данных не превышают 1000 по абсолютной величине.
В первой строке вам необходимо вывести N чисел – суммы элементов массива для каждой строки в отдельности.
Во второй строке в аналогичном формате выведите M чисел – суммы элементов для каждого столбца.'''

# line, column = map(int, input().split())
# arr = []
# sum_elem_arr = []
# sum_line_arr = []
#
#
# for i in range(line):
#     arr.append(list(map(int, input().split())))
#
# for line_index in range(line):
#     summa_elem = 0
#     for elem_index in range(column):
#         summa_elem += arr[line_index][elem_index]
#     print(summa_elem, end=' ')
#
# print()
#
# for line_index in range(column):
#     summa_column = 0
#     for elem_index in range(line):
#         summa_column += arr[elem_index][line_index]
#     print(summa_column, end=' ')

'''-------------------------------------'''

'''Проверьте, является ли двумерный массив симметричным относительно главной диагонали. 
Главная диагональ — та, которая идёт из левого верхнего угла двумерного массива в правый нижний.
Входные данные
Программа получает на вход число n<100, являющееся числом строк и столбцов в массиве. 
Далее во входном потоке идет n строк по n чисел, являющихся элементами массива.
Выходные данные
Программа должна выводить слово Yes для симметричного массива и слово No для несимметричного.'''

# line_and_column = int(input())
# matrix = []
# flag = True
# for i in range(line_and_column):
#     matrix.append(list(map(int, input().split())))
#
# for line_index in range(line_and_column):
#     for elem_index in range(line_and_column):
#         if matrix[line_index][elem_index] == matrix[elem_index][line_index]:
#             continue
#         else:
#             flag = False
#             break
#     if flag == False:
#         break
# print('Yes' if flag else 'No')

'''-------------------------------------'''

'''В метании молота состязается n спортcменов. Каждый из них сделал m бросков. 
Победителем считается тот спортсмен, у которого сумма результатов по всем броскам максимальна.
Если перенумеровать спортсменов числами от 0 до n-1, а попытки каждого из них – от 0 до m-1, 
то на вход программа получает массив A[n][m], состоящий из неотрицательных целых чисел. 
Программа должна определить максимальную сумму чисел в одной строке и вывести на экран эту сумму и 
номер строки, для которой достигается эта сумма.'''

# line, column = map(int, input().split())
# point = []
# summa = 0
# line_number = 0
# temporary_amount = 0
# counter = 0
#
# for i in range(line):
#     point.append(list(map(int, input().split())))
#
# for index_line in range(line):
#     for index_elem in range(column):
#         counter += point[index_line][index_elem]
#     if counter >= temporary_amount:
#         summa = counter
#         temporary_amount = counter
#         line_number = index_line
#     else:
#         summa = temporary_amount
#     counter = 0
#
# print(summa)
# print(line_number)

'''-------------------------------------'''

'''В метании молота состязается n спортcменов. 
Каждый из них сделал m бросков. 
Победителем соревнований объявляется тот спортсмен, у которого максимален наилучший результат по всем броскам. 
Таким образом, программа должна найти значение максимального элемента в данном массиве, а также его индексы (то есть номер спортсмена и номер попытки).'''

# line, column = map(int, input().split())
# point = []
# max_point = 0
# index_column = 0
# index_line = 0
#
# for i in range(line):
#     point.append(list(map(int, input().split())))
#
# for line_index in range(line):
#     for elem_index in range(column):
#         if point[line_index][elem_index] > max_point:
#             max_point = point[line_index][elem_index]
#             index_column = elem_index
#             index_line = line_index
#
#
# print(max_point)
# print(index_line, index_column)

'''-------------------------------------'''

'''В метании молота состязается n спортcменов. 
Каждый из них сделал m бросков. Побеждает спортсмен, у которого максимален наилучший бросок. 
Если таких несколько, то из них побеждает тот, у которого наилучшая сумма результатов по всем попыткам. 
Если и таких несколько, победителем считается спортсмен с минимальным номером. Определите номер победителя соревнований.'''

# line, column = map(int, input().split())
# point = []
# summa = 0
# max_point = 0
# line_number = 0
# for i in range(line):
#     point.append(list(map(int, input().split())))
#
# for index_line in range(line):
#     max_score = 0
#     max_summa = 0
#     for index_elem in range(column):
#         max_summa += point[index_line][index_elem]
#         if point[index_line][index_elem] > max_score:
#             max_score = point[index_line][index_elem]
#     if max_score > max_point:
#         max_point = max_score
#         summa = max_summa
#         line_number = index_line
#     elif max_score == max_point and max_summa > summa:
#         max_point = max_score
#         summa = max_summa
#         line_number = index_line
# print(line_number)

'''-------------------------------------'''

'''В метании молота состязается n спортcменов. 
Каждый из них сделал m бросков. 
Победитель определяется по лучшему результату. 
Определите количество участников состязаний, которые разделили первое место, 
то есть определите количество строк в массиве, которые содержат значение, равное наибольшему.'''

# line, column = map(int, input().split())
# point = []
# max_point = 0
# counter = 0
#
# for i in range(line):
#     point.append(list(map(int, input().split())))
#
# for index_line in range(line):
#     score = 0
#     for index_elem in range(column):
#         if point[index_line][index_elem] > score:
#             score = point[index_line][index_elem]
#     if score > max_point:
#         max_point = score
#         counter = 1
#     elif score == max_point:
#         counter += 1
# print(counter)

'''-------------------------------------'''

'''На днях Иван у себя в прихожей выложил кафель, состоящий из квадратных черных и белых плиток. 
Прихожая Ивана имеет квадратную форму 4х4, вмещающую 16 плиток. 
Теперь Иван переживает, что узор из плиток, который у него получился, может быть не симпатичным. 
С точки зрения дизайна симпатичным узором считается тот, который не содержит в себе квадрата 2х2, состоящего из плиток одного цвета.'''

# tiles = []
# flag = True
# for i in range(4):
#     tiles.append(input())
#
# for index_line in range(2):
#     for index_elem in range(2):
#         if tiles[index_line][index_elem] == tiles[index_line + 1][index_elem] == \
#               tiles[index_line][index_elem + 1] == tiles[index_line + 1][index_elem + 1]:
#             print('No')
#             flag = False
#             break
#     if not flag:
#         break
# else:
#     print('Yes')

'''-------------------------------------'''

'''Требуется написать программу, 
которая в качестве входных данных использует исходное бинарное черно-белое изображение и 
полученный Мишиной программой негатив, и на основе этого определяет количество пикселей, в которых допущена ошибка.
Программа сперва считывает числа n и m (1 ≤ n, m ≤ 100) – высоту и ширину исходного изображения (в пикселях). 
Последующие n строк содержат описание исходного изображения. 
Каждая строка состоит из m символов «B» и «W». Символ «B» соответствует черному пикселю, а символ «W» – белому. 
Далее следует пустая строка, а после нее – описание выведенного Мишиной программой изображения в том же формате, 
что и исходное изображение.
Необходимо вывести на экран число пикселей негатива, которые неправильно сформированы Мишиной программой.'''

# line, column = map(int, input().split())
# old_pixel = []
# new_pixel = []
# counter = 0
#
# for i in range(line):
#     old_pixel.append(input())
# input()
# for i in range(line):
#     new_pixel.append(input())
#
# for line_index in range(line):
#     for elem_index in range(column):
#         if old_pixel[line_index][elem_index] == new_pixel[line_index][elem_index]:
#             counter += 1
# print(counter)

'''-------------------------------------'''

'''Дано целое положительное число x. Требуется посчитать количество клеток таблицы, в которых находится число x.
Входные данные
В единственной строке находятся числа n и x (1≤n≤105, 1≤x≤109) — размер таблицы и число, которое мы ищем в таблице.
Выходные данные
Выведите единственное число: количество раз, которое число x встречается в таблице.'''

# table_size, num_search = map(int, input().split())
# table = []
# count = 0
# for i in range(1, table_size + 1):
#     line = []
#     for j in range(1, table_size + 1):
#         line.append(i*j)
#     table.append(line)
#     line = []
#
# for line_index in range(table_size):
#     for elem_index in range(table_size):
#         if table[line_index][elem_index] == num_search:
#             count += 1
#
# print(count)

'''или так'''

# table_size, num_search = map(int, input().split())
# count = 0
# for i in range(1, table_size + 1):
#     for j in range(1, table_size + 1):
#         if i * j == num_search:
#             count += 1
# print(count)

'''-------------------------------------'''

'''В чемпионате страны участвует n команд и он состоит из n·(n-1) матчей: 
каждая из команд принимает каждую другую команду на своем стадионе. 
Манао задумался, а сколько раз в течение одного чемпионата случится, что команда, 
играющая на своем стадионе, оденет выездную форму? Обратите внимание, 
что для подсчета этого количества порядок матчей не играет никакого значения.
Вам даны цвета домашней и выездной формы каждой команды. 
Для удобства эти цвета пронумерованы целыми числами таким образом, 
что никакие два разных цвета не имеют одинаковый номер. 
Помогите Манао найти ответ на его вопрос.'''

# size_table = int(input())
# form = []
# count = 0
#
# for i in range(size_table):
#     form.append(list(map(int, input().split())))
#
# for line_index in range(size_table - 1):
#     for elem_index in range(line_index + 1, size_table):
#         if form[line_index][0] == form[elem_index][1]:
#             count += 1
#         if form[line_index][1] == form[elem_index][0]:
#             count += 1
# print(count)

'''-------------------------------------'''

'''Ссылка на задачу: https://acmp.ru/asp/do/index.asp?main=task&id_course=1&id_section=8&id_topic=121&id_problem=750'''

# line, elem = map(int, input().split())
# field = []
# field.append('.' * (elem + 2))
# count = 0
#
# for i in range(line):
#     field.append('.' + input() + '.')
# field.append('.' * (elem + 2))
#
# for line_index in range(1, line + 1):
#     for elem_index in range(1, elem + 1):
#         if field[line_index - 1][elem_index] == '.' and field[line_index][elem_index + 1] == '.' and \
#                 field[line_index + 1][elem_index] == '.' and field[line_index][elem_index - 1] == '.' and \
#                 field[line_index][elem_index] == '.':
#             count += 1
# print(count)

'''-------------------------------------'''

'''Даны числа n и m. Создайте массив A[n][m] и заполните его змейкой (см. пример).
Входные данные
Программа получает на вход два числа n и m.
Выходные данные
Программа должна вывести  полученный массив, при этом между числами может быть любое количество пробелов.'''

# line, column = map(int, input().split())
# table = []
# num = 0
#
# for i in range(line):
#     temporary_list = []
#     for j in range(column):
#         temporary_list.append(num)
#         num += 1
#     table.append(temporary_list)
#
# for line_index in range(line):
#     if line_index % 2 != 0:
#         table[line_index] = table[line_index][::-1]
#     print(*table[line_index])

'''-------------------------------------'''

'''Ссылка на задачу: https://codeforces.com/problemset/problem/707/A'''

# line, column = map(int, input().split())
# foto = []
# answer = ''
# for i in range(line):
#     foto.append(list(input().split()))
#     for elem in range(column):
#         answer += foto[i][elem]
#
# if 'CMY' in answer:
#     print('#Color')
# else:
#     print('#Black&White')

'''-------------------------------------'''

'''Требуется вывести квадрат, состоящий из N×N клеток, заполненных числами от 1 до N2 по спирали (см. примеры).'''

# n = int(input())
# i = 1
# x = 0
# y = -1
# d_row = 0
# d_column = 1
# length = len(str(n ** 2))
# mass = [[0] * n for i in range(n)]
#
# while i <= n ** 2:
#     if 0 <= x + d_row < n and 0 <= y + d_column < n and mass[x + d_row][y + d_column] == 0:
#         x += d_row
#         y += d_column
#         mass[x][y] = i
#         i += 1
#     else:
#         if d_column == 1:
#             d_column = 0
#             d_row = 1
#         elif d_row == 1:
#             d_row = 0
#             d_column = -1
#         elif d_column == -1:
#             d_column = 0
#             d_row = -1
#         elif d_row == -1:
#             d_row = 0
#             d_column = 1
# for row in mass:
#     for elem in row:
#         print(str(elem).rjust(length), end=' ')
#     print()

'''-------------------------------------'''

'''Тортминатор намерен съесть этот торт! 
Каждый раз, когда он ест, он выбирает строку или столбец, 
не содержащие гадкой клубнички, а содержащие по крайней мере одну несъеденную ячейку торта. 
Затем Тортминатор поедает все выбранные им ячейки торта. Тортминатор может есть сколько угодно раз.
Пожалуйста, выведите максимальное количество ячеек, которые может съесть Тортминатор.'''

# line, column = map(int, input().split())
# tort = []
# truefalse_mas = [[False] * column for i in range(line)]
# counter = 0
#
# for i in range(line):
#     tort.append(list(input()))
#
# for line_index in range(line):
#     if 'S' not in tort[line_index]:
#         for elem_index in range(column):
#             truefalse_mas[line_index][elem_index] = True
#
# for column_index in range(column):
#     is_find = False
#     for elem_index in range(line):
#         if tort[elem_index][column_index] == 'S':
#             is_find = True
#             break
#     if not is_find:
#         for i in range(line):
#             truefalse_mas[i][column_index] = True
#
# for i in truefalse_mas:
#     counter += i.count(True)
# print(counter)

'''-------------------------------------'''

'''Программа принимает на вход два целых числа a и b.
Если a<=b необходимо сформировать список квадратов целых чисел на интервале от а до b включительно и вывести его на экран.
Если же a>b, необходимо сформировать список кубов целых чисел на интервале от a до b включительно, 
двигаясь в порядке убывания, и затем вывести его.'''

# a, b = map(int, input().split())
# print([i**2 for i in range(a, b + 1)] or [i**3 for i in range(a, b - 1, -1)])

'''-------------------------------------'''

'''Создайте список первых букв каждого слова из строки st и выведите его на экран'''

# st = 'Create a list of the first letters of every word in this string'
# print([i[0] for i in st.split()])

'''-------------------------------------'''

'''Напишите программу, которая выводит часть последовательности 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 ... 
(число повторяется столько раз, чему равно). 
На вход программе передаётся неотрицательное целое число n — столько элементов последовательности должна 
отобразить программа. На выходе ожидается последовательность чисел, записанных через пробел в одну строку.
Например, если n = 7, то программа должна вывести 1 2 2 3 3 3 4.'''

# num = int(input())
# counter = 0
# number = []
# for i in range(1, num + 1):
#     for j in range(1, i + 1):
#         if counter != num:
#             number.append(i)
#             counter += 1
# print(*number)

'''-------------------------------------'''

'''Напишите программу, которая считывает список чисел lstlst из первой строки и число xx из второй строки, 
которая выводит все позиции, на которых встречается число xx в переданном списке lstlst.
Позиции нумеруются с нуля, если число xx не встречается в списке, вывести строку "Отсутствует" 
(без кавычек, с большой буквы).
Позиции должны быть выведены в одну строку, по возрастанию абсолютного значения.'''

# numbers = list(map(int, input().split()))
# search_num = int(input())
# answer = []
# for index in range(len(numbers)):
#     if numbers[index] == search_num:
#         answer.append(index)
# if len(answer) > 0:
#     print(*answer)
# else:
#     print('Отсутствует')


